name: Deploy to AWS

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=latest
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}
          ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update ECS service
      run: |
        # Get current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition' \
          --output json)

        # Create new task definition with updated image
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.version.outputs.version }}" \
          '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

        # Register new task definition
        aws ecs register-task-definition \
          --cli-input-json "$NEW_TASK_DEFINITION"

        # Update service to use new task definition
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --task-definition ${{ secrets.ECS_TASK_DEFINITION }}

        # Wait for deployment to complete
        aws ecs wait services-stable \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }}

    - name: Verify deployment
      run: |
        # Check service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --services ${{ secrets.ECS_SERVICE }} \
          --query 'services[0].status' \
          --output text)
        
        if [ "$SERVICE_STATUS" != "ACTIVE" ]; then
          echo "Service deployment failed"
          exit 1
        fi
        
        echo "Deployment successful!"

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy.result }}
        channel: '#deployments'
        text: |
          PhiLLM deployment ${{ needs.deploy.result }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}